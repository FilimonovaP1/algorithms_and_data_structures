# Функция пузырьковой сортировки
def bubble_sort(arr):
    """
    Функция сортирует список arr по возрастанию
    методом пузырьковой сортировки (Bubble Sort).
    Сортировка выполняется "на месте", то есть без создания копии списка.
    """

    n = len(arr)  # сохраняем длину списка (чтобы не вычислять её в каждом цикле)

    # Внешний цикл — количество проходов по массиву
    # За каждый проход самый "тяжёлый" (наибольший) элемент всплывает в конец
    for i in range(n - 1):  # нужно сделать (n-1) полных проходов
        # Флаг для оптимизации: если за проход не было обменов — массив уже отсортирован
        swapped = False

        # Внутренний цикл — сравнение соседних элементов
        # После каждого прохода последний элемент уже на своём месте, поэтому j идёт до n-i-2
        for j in range(n - i - 1):
            # Сравниваем текущий элемент и следующий
            if arr[j] > arr[j + 1]:
                # Если текущий больше следующего — меняем их местами
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

                # Отмечаем, что был произведён обмен
                swapped = True

        # Если за проход не было ни одного обмена — массив отсортирован, можно завершить раньше
        if not swapped:
            break


# Функция для вывода массива в удобном виде
def print_array(arr):
    """
    Печатает элементы списка через пробел.
    """
    for x in arr:
        print(x, end=" ")
    print()  # переход на новую строку


# Основная часть программы
if __name__ == "__main__":
    # Пользователь вводит количество элементов
    n = int(input("Введите количество элементов массива: "))

    # Создаём пустой список
    arr = []

    # Вводим элементы массива
    print(f"Введите {n} элементов массива:")
    for i in range(n):
        value = int(input(f"Элемент {i + 1}: "))
        arr.append(value)

    print("\nМассив до сортировки:")
    print_array(arr)

    # Вызываем сортировку
    bubble_sort(arr)

    print("Массив после сортировки:")
    print_array(arr)

